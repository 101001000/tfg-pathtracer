#pragma once

#include "Math.h"
#include "Ray.h"
#include "Material.h"

#include "cuda_runtime.h"

__device__ inline Vector3 MatrixMultiply(const Vector3& vec, Vector3* mat)
{
    Vector3 result = {
        vec.x * mat[0].x + vec.y * mat[1].x + vec.z * mat[2].x,
        vec.x * mat[0].y + vec.y * mat[1].y + vec.z * mat[2].y,
        vec.x * mat[0].z + vec.y * mat[1].z + vec.z * mat[2].z
    };
    return result;
}

__device__ inline float Square(float x)
{
    return x * x;
}

__device__ inline float AbsDot(Vector3 lhs, Vector3 rhs)
{
    return abs((lhs.x * rhs.x) + (lhs.y * rhs.y));
}


__device__ inline float CosTheta(const Vector3& w)
{
    return w.y;
}

__device__ inline float Cos2Theta(const Vector3& w)
{
    return w.y * w.y;
}

__device__ inline float Sin2Theta(const Vector3& w)
{
    return maxf(0.0f, 1.0f - Cos2Theta(w));
}

__device__ inline float SinTheta(const Vector3& w)
{
    return sqrtf(Sin2Theta(w));
}

__device__ inline float TanTheta(const Vector3& w)
{
    return SinTheta(w) / CosTheta(w);
}


__device__ inline float CosPhi(const Vector3& w)
{
    float sinTheta = SinTheta(w);
    return (sinTheta == 0) ? 1.0f : clamp(w.x / sinTheta, -1.0f, 1.0f);
}


__device__ inline float Cos2Phi(const Vector3& w)
{
    float cosPhi = CosPhi(w);
    return cosPhi * cosPhi;
}

__device__ inline float AbsCosTheta(const Vector3& w)
{
    return abs(CosTheta(w));
}


__device__ inline float SinPhi(const Vector3& w)
{
    float sinTheta = SinTheta(w);
    return (sinTheta == 0) ? 1.0f : clamp(w.z / sinTheta, -1.0f, 1.0f);
}

__device__ inline float Sin2Phi(const Vector3& w)
{
    float sinPhi = SinPhi(w);
    return sinPhi * sinPhi;
}


__device__ inline float SchlickWeight(float u)
{
    float m = clamp(1.0f - u, 0, 1);
    float m2 = m * m;
    return m * m2 * m2;
}

__device__ inline float Schlick(float r0, float radians)
{
    return lerp(1.0f, SchlickWeight(radians), r0);
}

//=========================================================================================================================
__device__ inline Vector3 Schlick(Vector3 r0, float radians)
{
    float exponential = powf(1.0f - radians, 5.0f);
    return r0 + (Vector3(1.0) - r0) * exponential;
}



__device__ inline float Dielectric(float cosThetaI, float ni, float nt)
{
    // Copied from PBRT. This function calculates the full Fresnel term for a dielectric material.
    // See Sebastion Legarde's link above for details.

    cosThetaI = clamp(cosThetaI, -1.0f, 1.0f);

    // Swap index of refraction if this is coming from inside the surface
    if (cosThetaI < 0.0f) {
        float temp = ni;
        ni = nt;
        nt = temp;

        cosThetaI = -cosThetaI;
    }

    float sinThetaI = sqrtf(maxf(0.0f, 1.0f - cosThetaI * cosThetaI));
    float sinThetaT = ni / nt * sinThetaI;

    // Check for total internal reflection
    if (sinThetaT >= 1) {
        return 1;
    }

    float cosThetaT = sqrtf(maxf(0.0f, 1.0f - sinThetaT * sinThetaT));

    float rParallel = ((nt * cosThetaI) - (ni * cosThetaT)) / ((nt * cosThetaI) + (ni * cosThetaT));
    float rPerpendicuar = ((ni * cosThetaI) - (nt * cosThetaT)) / ((ni * cosThetaI) + (nt * cosThetaT));
    return (rParallel * rParallel + rPerpendicuar * rPerpendicuar) / 2;
}

__device__ inline static Vector3 CalculateTint(Vector3 baseColor)
{
    // -- The color tint is never mentioned in the SIGGRAPH presentations as far as I recall but it was done in
    // --  the BRDF Explorer so I'll replicate that here.
    float luminance = Vector3::dot(Vector3(0.3f, 0.6f, 1.0f), baseColor);
    return (luminance > 0.0f) ? baseColor * (1.0f / luminance) : Vector3(1,1,1);
}

__device__ inline static Vector3 EvaluateSheen(Vector3 albedo, Material material, Vector3 wo, Vector3 wm, Vector3 wi)
{
    if (material.sheen <= 0.0f) {
        return Vector3();
    }

    float dotHL = Vector3::dot(wm, wi);
    Vector3 tint = CalculateTint(albedo);
    //POSIBLE FALLO EN EL SCHLICK, COMPROBAR IMPLEMENTACIÓN 
    return material.sheen * lerp(Vector3(1, 1, 1), tint, material.sheenTint) * SchlickWeight(dotHL);
}

//=========================================================================================================================
__device__ inline float SchlickR0FromRelativeIOR(float eta)
{
    // https://seblagarde.wordpress.com/2013/04/29/memo-on-fresnel-equations/
    return Square(eta - 1.0f) / Square(eta + 1.0f);
}

//===================================================================================================================
__device__ inline static float GTR1(float absDotHL, float a)
{
    if (a >= 1) {
        return 1.0/PI;
    }

    float a2 = a * a;
    return (a2 - 1.0f) / (PI * log2f(a2) * (1.0f + (a2 - 1.0f) * absDotHL * absDotHL));
}

//===================================================================================================================
__device__ inline float SeparableSmithGGXG1(const Vector3& w, float a)
{
    float a2 = a * a;
    float absDotNV = AbsCosTheta(w);

    return 2.0f / (1.0f + sqrtf(a2 + (1 - a2) * absDotNV * absDotNV));
}

//===================================================================================================================
__device__ inline static float EvaluateDisneyClearcoat(float clearcoat, float alpha, const Vector3& wo, const Vector3& wm,
    const Vector3& wi, float& fPdfW, float& rPdfW)
{
    if (clearcoat <= 0.0f) {
        return 0.0f;
    }

    float absDotNH = AbsCosTheta(wm);
    float absDotNL = AbsCosTheta(wi);
    float absDotNV = AbsCosTheta(wo);
    float dotHL = Vector3::dot(wm, wi);

    float d = GTR1(absDotNH, lerp(0.1f, 0.001f, alpha));
    float f = Schlick(0.04f, dotHL);
    float gl = SeparableSmithGGXG1(wi, 0.25f);
    float gv = SeparableSmithGGXG1(wo, 0.25f);

    fPdfW = d / (4.0f * absDotNL);
    rPdfW = d / (4.0f * absDotNV);

    return 0.25f * clearcoat * d * f * gl * gv;
}

//===================================================================================================================
__device__ inline float GgxAnisotropicD(const Vector3& wm, float ax, float ay)
{
    float dotHX2 = Square(wm.x);
    float dotHY2 = Square(wm.z);
    float cos2Theta = Cos2Theta(wm);
    float ax2 = Square(ax);
    float ay2 = Square(ay);

    return 1.0f / (PI * ax * ay * Square(dotHX2 / ax2 + dotHY2 / ay2 + cos2Theta));
}

//===================================================================================================================
__device__ inline float SeparableSmithGGXG1(const Vector3& w, const Vector3& wm, float ax, float ay)
{
    float dotHW = Vector3::dot(w, wm);
    if (dotHW <= 0.0f) {
        return 0.0f;
    }

    float absTanTheta = abs(TanTheta(w));
    if (isinf(absTanTheta)) {
        return 0.0f;
    }

    float a = sqrtf(Cos2Phi(w) * ax * ax + Sin2Phi(w) * ay * ay);
    float a2Tan2Theta = Square(a * absTanTheta);

    float lambda = 0.5f * (-1.0f + sqrtf(1.0f + a2Tan2Theta));
    return 1.0f / (1.0f + lambda);
}

//===================================================================================================================
__device__ inline static Vector3 DisneyFresnel(Material surface, Vector3 albedo, const Vector3& wo, const Vector3& wm, const Vector3& wi)
{
    float dotHV = abs(Vector3::dot(wm, wo));

    Vector3 tint = CalculateTint(albedo);

    // -- See section 3.1 and 3.2 of the 2015 PBR presentation + the Disney BRDF explorer (which does their
    // -- 2012 remapping rather than the SchlickR0FromRelativeIOR seen here but they mentioned the switch in 3.2).
    Vector3 R0 = SchlickR0FromRelativeIOR(surface.relativeIOR) * lerp(Vector3(1.0, 1.0, 1.0), tint,
        surface.specularTint);
    R0 = lerp(R0, albedo, surface.metalness);

    float dielectricFresnel = Dielectric(dotHV, 1.0f, surface.ior);
    Vector3 metallicFresnel = Schlick(R0, Vector3::dot(wi, wm));

    return lerp(Vector3(dielectricFresnel), metallicFresnel, surface.metalness);
}

//=============================================================================================================================
__device__ inline static void CalculateAnisotropicParams(float roughness, float anisotropic, float& ax, float& ay)
{
    float aspect = sqrtf(1.0f - 0.9f * anisotropic);
    ax = maxf(0.001f, Square(roughness) / aspect);
    ay = maxf(0.001f, Square(roughness) * aspect);
}

//=========================================================================================================================
__device__ inline void GgxVndfAnisotropicPdf(const Vector3& wi, const Vector3& wm, const Vector3& wo, float ax, float ay,
    float& forwardPdfW, float& reversePdfW)
{
    float D = GgxAnisotropicD(wm, ax, ay);

    float absDotNL = AbsCosTheta(wi);
    float absDotHL = abs(Vector3::dot(wm, wi));
    float G1v = SeparableSmithGGXG1(wo, wm, ax, ay);
    forwardPdfW = G1v * absDotHL * D / absDotNL;

    float absDotNV = AbsCosTheta(wo);
    float absDotHV = abs(Vector3::dot(wm, wo));
    float G1l = SeparableSmithGGXG1(wi, wm, ax, ay);
    reversePdfW = G1l * absDotHV * D / absDotNV;
}

//===================================================================================================================
__device__ inline static Vector3 EvaluateDisneyBRDF(Material material, Vector3 albedo, const Vector3& wo, const Vector3& wm,
    const Vector3& wi, float& fPdf, float& rPdf)
{
    fPdf = 0.0f;
    rPdf = 0.0f;

    float dotNL = CosTheta(wi);
    float dotNV = CosTheta(wo);
    if (dotNL <= 0.0f || dotNV <= 0.0f) {
        return Vector3();
    }

    float ax, ay;
    CalculateAnisotropicParams(material.roughness, material.anisotropic, ax, ay);

    float d = GgxAnisotropicD(wm, ax, ay);
    float gl = SeparableSmithGGXG1(wi, wm, ax, ay);
    float gv = SeparableSmithGGXG1(wo, wm, ax, ay);

    Vector3 f = DisneyFresnel(material, albedo, wo, wm, wi);

    GgxVndfAnisotropicPdf(wi, wm, wo, ax, ay, fPdf, rPdf);
    fPdf *= (1.0f / (4 * AbsDot(wo, wm)));
    rPdf *= (1.0f / (4 * AbsDot(wi, wm)));

    return d * gl * gv * f / (4.0f * dotNL * dotNV);
}

//=============================================================================================================================
__device__ inline static float EvaluateDisneyRetroDiffuse(Material surface, const Vector3& wo, const Vector3& wm, const Vector3& wi)
{
    float dotNL = AbsCosTheta(wi);
    float dotNV = AbsCosTheta(wo);

    float roughness = surface.roughness * surface.roughness;

    float rr = 0.5f + 2.0f * dotNL * dotNL * roughness;
    float fl = SchlickWeight(dotNL);
    float fv = SchlickWeight(dotNV);

    return rr * (fl + fv + fl * fv * (rr - 1.0f));
}

//===================================================================================================================
__device__ inline static float EvaluateDisneyDiffuse(Material surface, const Vector3& wo, const Vector3& wm,
    const Vector3& wi, bool thin)
{
    float dotNL = AbsCosTheta(wi);
    float dotNV = AbsCosTheta(wo);

    float fl = SchlickWeight(dotNL);
    float fv = SchlickWeight(dotNV);

    float hanrahanKrueger = 0.0f;

    if (thin && surface.flatness > 0.0f) {
        float roughness = surface.roughness * surface.roughness;

        float dotHL = Vector3::dot(wm, wi);
        float fss90 = dotHL * dotHL * roughness;
        float fss = lerp(1.0f, fss90, fl) * lerp(1.0f, fss90, fv);

        float ss = 1.25f * (fss * (1.0f / (dotNL + dotNV) - 0.5f) + 0.5f);
        hanrahanKrueger = ss;
    }

    float lambert = 1.0f;
    float retro = EvaluateDisneyRetroDiffuse(surface, wo, wm, wi);
    float subsurfaceApprox = lerp(lambert, hanrahanKrueger, thin ? surface.flatness : 0.0f);

    return (1.0/PI) * (retro + subsurfaceApprox * (1.0f - 0.5f * fl) * (1.0f - 0.5f * fv));
}

__device__ inline static float ThinTransmissionRoughness(float ior, float roughness)
{
    // -- Disney scales by (.65 * eta - .35) based on figure 15 of the 2015 PBR course notes. Based on their figure the results
    // -- match a geometrically thin solid fairly well but it is odd to me that roughness is decreased until an IOR of just
    // -- over 2.
    return clamp((0.65f * ior - 0.35f) * roughness, 0, 1);
}

//=============================================================================================================================
__device__ inline static Vector3 EvaluateDisneySpecTransmission(Material surface, Vector3 albedo, const Vector3& wo, const Vector3& wm,
    const Vector3& wi, float ax, float ay, bool thin)
{
    float relativeIor = surface.relativeIOR;
    float n2 = relativeIor * relativeIor;

    float absDotNL = AbsCosTheta(wi);
    float absDotNV = AbsCosTheta(wo);
    float dotHL = Vector3::dot(wm, wi);
    float dotHV = Vector3::dot(wm, wo);
    float absDotHL = abs(dotHL);
    float absDotHV = abs(dotHV);

    float d =  GgxAnisotropicD(wm, ax, ay);
    float gl = SeparableSmithGGXG1(wi, wm, ax, ay);
    float gv = SeparableSmithGGXG1(wo, wm, ax, ay);

    float f = Dielectric(dotHV, 1.0f, surface.ior);

    Vector3 color;
    if (thin)
        color = sqrt(albedo);
    else
        color = albedo;

    // Note that we are intentionally leaving out the 1/n2 spreading factor since for VCM we will be evaluating particles with
    // this. That means we'll need to model the air-[other medium] transmission if we ever place the camera inside a non-air
    // medium.
    float c = (absDotHL * absDotHV) / (absDotNL * absDotNV);
    float t = (n2 / Square(dotHL + relativeIor * dotHV));
    return color * c * t * (1.0f - f) * gl * gv * d;
}

//===================================================================================================================
__device__ inline static void CalculateLobePdfs(Material surface,
    float& pSpecular, float& pDiffuse, float& pClearcoat, float& pSpecTrans)
{
    float metallicBRDF = surface.metalness;
    float specularBSDF = (1.0f - surface.metalness) * surface.specTrans;
    float dielectricBRDF = (1.0f - surface.specTrans) * (1.0f - surface.metalness);

    float specularWeight = metallicBRDF + dielectricBRDF;
    float transmissionWeight = specularBSDF;
    float diffuseWeight = dielectricBRDF;
    float clearcoatWeight = 1.0f * clamp(surface.clearcoat, 0, 1);

    float norm = 1.0f / (specularWeight + transmissionWeight + diffuseWeight + clearcoatWeight);

    pSpecular = specularWeight * norm;
    pSpecTrans = transmissionWeight * norm;
    pDiffuse = diffuseWeight * norm;
    pClearcoat = clearcoatWeight * norm;
}

//=============================================================================================================================
__device__ inline void MakeOrthogonalCoordinateSystem(const Vector3& v1, Vector3* v2, Vector3* v3)
{
    if (abs(v1.x) > abs(v1.y))
        *v2 = Vector3(-v1.z, 0, v1.x) * (1.0f / sqrtf(v1.x * v1.x + v1.z * v1.z));
    else
        *v2 = Vector3(0, v1.z, -v1.y) * (1.0f / sqrtf(v1.y * v1.y + v1.z * v1.z));
    *v3 = Vector3::cross(v1, *v2);
}

//=============================================================================================================================
__device__ inline void MatrixTranspose(Vector3* mat, Vector3 (&result)[3]) {

    result[0] = Vector3(mat[0].x, mat[1].x, mat[2].x);
    result[1] = Vector3(mat[0].y, mat[1].y, mat[2].y);
    result[2] = Vector3(mat[0].z, mat[1].z, mat[2].z);
}

//===================================================================================================================
__device__ inline Vector3 EvaluateDisney(Material surface, Vector3 albedo, Vector3 N, Vector3 v, Vector3 l, bool thin,
    float& forwardPdf, float& reversePdf)
{
    Vector3 t, n, b;
    
    n = N.normalized();

    MakeOrthogonalCoordinateSystem(n, &t, &b);

    Vector3 tangentToWorld[3];

    tangentToWorld[0] = t;
    tangentToWorld[1] = n;
    tangentToWorld[2] = b;

    Vector3 worldToTangent[3];
    
    MatrixTranspose(tangentToWorld, worldToTangent);

    Vector3 wo = MatrixMultiply(v, worldToTangent).normalized();
    Vector3 wi = MatrixMultiply(l, worldToTangent).normalized();
    Vector3 wm = (wo + wi).normalized();

    float dotNV = CosTheta(wo);
    float dotNL = CosTheta(wi);

    Vector3 reflectance = Vector3();
    forwardPdf = 0.0f;
    reversePdf = 0.0f;

    float pBRDF, pDiffuse, pClearcoat, pSpecTrans;
    CalculateLobePdfs(surface, pBRDF, pDiffuse, pClearcoat, pSpecTrans);

    Vector3 baseColor = albedo;
    float metallic = surface.metalness;
    float specTrans = surface.specTrans;
    float roughness = surface.roughness;

    // calculate all of the anisotropic params
    float ax, ay;
    CalculateAnisotropicParams(surface.roughness, surface.anisotropic, ax, ay);

    float diffuseWeight = (1.0f - metallic) * (1.0f - specTrans);
    float transWeight = (1.0f - metallic) * specTrans;

    // -- Clearcoat
    bool upperHemisphere = dotNL > 0.0f && dotNV > 0.0f;
    if (upperHemisphere && surface.clearcoat > 0.0f) {

        float forwardClearcoatPdfW;
        float reverseClearcoatPdfW;

        float clearcoat = EvaluateDisneyClearcoat(surface.clearcoat, surface.clearcoatGloss, wo, wm, wi,
            forwardClearcoatPdfW, reverseClearcoatPdfW);
        reflectance += Vector3(clearcoat);
        forwardPdf += pClearcoat * forwardClearcoatPdfW;
        reversePdf += pClearcoat * reverseClearcoatPdfW;
    }

    // -- Diffuse
    if (diffuseWeight > 0.0f) {
        float forwardDiffusePdfW = AbsCosTheta(wi);
        float reverseDiffusePdfW = AbsCosTheta(wo);
        float diffuse = EvaluateDisneyDiffuse(surface, wo, wm, wi, thin);

        Vector3 sheen = EvaluateSheen(albedo, surface, wo, wm, wi);

        reflectance += diffuseWeight * (diffuse * albedo + sheen);

        forwardPdf += pDiffuse * forwardDiffusePdfW;
        reversePdf += pDiffuse * reverseDiffusePdfW;
    }

    // -- transmission
    if (transWeight > 0.0f) {

        // Scale roughness based on IOR (Burley 2015, Figure 15).
        float rscaled = thin ? ThinTransmissionRoughness(surface.ior, surface.roughness) : surface.roughness;
        float tax, tay;
        CalculateAnisotropicParams(rscaled, surface.anisotropic, tax, tay);

        Vector3 transmission = EvaluateDisneySpecTransmission(surface, albedo, wo, wm, wi, tax, tay, thin);
        reflectance += transWeight * transmission;

        float forwardTransmissivePdfW;
        float reverseTransmissivePdfW;
        GgxVndfAnisotropicPdf(wi, wm, wo, tax, tay, forwardTransmissivePdfW, reverseTransmissivePdfW);

        float dotLH = Vector3::dot(wm, wi);
        float dotVH = Vector3::dot(wm, wo);
        forwardPdf += pSpecTrans * forwardTransmissivePdfW / (Square(dotLH + surface.relativeIOR * dotVH));
        reversePdf += pSpecTrans * reverseTransmissivePdfW / (Square(dotVH + surface.relativeIOR * dotLH));
    }

    // -- specular
    if (upperHemisphere) {
        float forwardMetallicPdfW;
        float reverseMetallicPdfW;
        Vector3 specular = EvaluateDisneyBRDF(surface, albedo, wo, wm, wi, forwardMetallicPdfW, reverseMetallicPdfW);

        reflectance += specular;
        forwardPdf += pBRDF * forwardMetallicPdfW / (4 * AbsDot(wo, wm));
        reversePdf += pBRDF * reverseMetallicPdfW / (4 * AbsDot(wi, wm));
    }

    reflectance = reflectance * abs(dotNL);

    return reflectance;
}
